image: 
  # Use same base image as Dockerfile.mcp-server
  name: python:3.12
resources:
  node_type: t3a.large
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: 500m
    memory: 1Gi
tolerations: []
git:
  repo_url: 'https://github.com/agentic-community/mcp-gateway-registry'
  branch: main
pvc:
  # Mount EFS for shared storage
  - name: pv-efs
    mount_path: /efs 
pre_script: 
  # Install system dependencies exactly like Dockerfile.mcp-server
  - export PYTHONUNBUFFERED=1
  - apt-get update && apt-get install -y --no-install-recommends curl git build-essential netcat-openbsd
  - apt-get clean && rm -rf /var/lib/apt/lists/*
  # The git repository is now automatically cloned to /app by the chart template
  # Setup MCP server application directory (SERVER_PATH=servers/mcpgw)
  - mkdir -p /app/mcp_working && cd /app/servers/mcpgw && cp -r * /app/mcp_working/
  # Copy shared servers directory from EFS (like docker-compose: /opt/mcp-gateway/servers:/app/registry/servers)
  - mkdir -p /app/registry/servers
  - cp -r /efs/mcp-gateway/servers/* /app/registry/servers/ || echo "No server files to copy"
  - ls -la /app/registry/servers/
  # Copy shared scopes.yml from EFS (like docker-compose: /opt/mcp-gateway/auth_server/scopes.yml:/app/auth_server/scopes.yml)
  - mkdir -p /app/auth_server
  - cp /efs/mcp-gateway/scopes.yml /app/auth_server/scopes.yml || echo "Failed to copy scopes.yml"
  - cd /app/mcp_working
  # Install uv and setup Python environment exactly like Dockerfile.mcp-server
  - pip install uv
  - uv venv .venv --python 3.12
  # Install dependencies from pyproject.toml if it exists
  - . .venv/bin/activate
  - if [ -f pyproject.toml ]; then uv pip install --requirement pyproject.toml; fi
  # Use same shared directories as registry and auth server
  - mkdir -p /efs/mcp-gateway/servers /efs/mcp-gateway/models /efs/mcp-gateway/logs /efs/mcp-gateway/auth_server
  # Map shared EFS directories to expected container paths (like docker volumes)
  - ln -sf /efs/mcp-gateway/servers /app/registry/servers
  - ln -sf /efs/mcp-gateway/models /app/registry/models
  - ln -sf /efs/mcp-gateway/logs /app/mcp_working/logs
  - ln -sf /efs/mcp-gateway/auth_server/scopes.yml /app/mcp_working/auth_server/scopes.yml
server:
  ports:
    - name: 'mcp'
      value: 8003
  # Internal MCP gateway - accessed through registry only
  readiness_probe:
    period_secs: 30
    failure_threshold: 5
    exec:
      command:
        - /bin/bash
        - -c
        - "nc -z localhost ${PORT:-8003}"
  startup_probe:
    period_secs: 30
    failure_threshold: 10
    exec:
      command:
        - /bin/bash
        - -c
        - "nc -z localhost ${PORT:-8003}"
  liveness_probe:
    period_secs: 500
    failure_threshold: 3
    exec:
      command:
        - /bin/bash
        - -c
        - "nc -z localhost ${PORT:-8003}"
  env:
    - name: HOME
      value: /app
    - name: PYTHONUNBUFFERED
      value: "1"
    - name: PORT
      value: "8003"
    - name: REGISTRY_BASE_URL
      value: "http://registry:7860"
    - name: REGISTRY_USERNAME
      value: "{{ .Values.admin_user | default \"admin\" }}"
    - name: REGISTRY_PASSWORD
      value: "{{ .Values.admin_password }}"
  # Direct server startup command (like auth server)
  command:
    - /bin/bash
  args:
    - -c
    - "cd /app/mcp_working && source .venv/bin/activate && if [ ! -z \"$REGISTRY_BASE_URL\" ]; then echo \"REGISTRY_BASE_URL=$REGISTRY_BASE_URL\" > .env; echo \"REGISTRY_USERNAME=$REGISTRY_USERNAME\" >> .env; echo \"REGISTRY_PASSWORD=$REGISTRY_PASSWORD\" >> .env; fi && python server.py --port ${PORT:-8003} --transport sse"
  autoscaling:
    minReplicas: 1
    maxReplicas: 2
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80 