apiVersion: v1
kind: ConfigMap
metadata:
  name: launcher-{{ .Release.Name }}
data:
  launcher.sh: |
    #!/bin/bash
   
    # Create /app directory first (before git operations)
    mkdir -p /app
    cd /app

    {{- range .Values.inline_script }}
    {{ . | indent 4 }}
    {{- end }}

    {{- if .Values.git.repo_url }}
    # Install git first for cloning
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get install -y --no-install-recommends git
    
    # Clone repository immediately after git installation
    echo "Cloning repository immediately after git installation..."
    mkdir -p /tmp/repo_temp
    git clone {{ .Values.git.repo_url }} /tmp/repo_temp

    {{- if .Values.git.branch }}
    cd /tmp/repo_temp && git checkout {{ .Values.git.branch }}
    {{- end }}

    {{- if .Values.git.commit }}
    cd /tmp/repo_temp && git fetch origin {{ .Values.git.commit }}
    cd /tmp/repo_temp && git reset --hard {{ .Values.git.commit }}
    {{- end }}
    
    # Copy repository content to /app (preserving existing mounted volumes)
    echo "Copying repository content to /app..."
    cp -r /tmp/repo_temp/* /app/
    cp -r /tmp/repo_temp/.[^.]* /app/ 2>/dev/null || true
    cd /app
    echo "Repository content copied successfully"
    ls -la /app
    echo "Repository files now available for use"
    {{- end }}

    # Run all pre_script operations
    {{- range .Values.pre_script }}
    {{ . }}
    {{- end }}

    # After pre_script setup, execute the server command if provided
    {{- if .Values.server.command }}
    echo "Executing server command..."
    exec {{ index .Values.server.command 0 }}{{- range .Values.server.args }} {{ . | quote }}{{- end }}
    {{- else }}
    echo "No server command specified, keeping container alive"
    tail -f /dev/null
    {{- end }}

    # Note: We keep the git repository in /app (no cleanup) to match docker-compose.yml behavior
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.server.autoscaling.minReplicas }}
  selector:
    matchLabels:
     app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        karpenter.sh/do-not-disrupt: "true"
        sidecar.istio.io/inject: 'false'
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      {{- if .Values.scheduler_name }}
      schedulerName: {{ .Values.scheduler_name }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            defaultMode: 420
            items:
            - key: launcher.sh
              mode: 365
              path: launcher.sh
            name: launcher-{{ .Release.Name }}
        - name: shm
          hostPath:
            path: /dev/shm
            type: Directory
        {{- $pv_index := 1 }}
        {{- range $pv := .Values.pvc }}
        - name: pv-{{ $pv_index }}
          persistentVolumeClaim:
            claimName: {{ $pv.name }}
        {{- $pv_index = add $pv_index 1 }}
        {{- end }}
        {{- if .Values.ebs }}
        - name: ebs
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: {{ .Values.ebs.storage | default "100Gi" }}
                storageClassName: ebs-sc-wait
        {{- end }}
      tolerations:
      {{- range $v := .Values.tolerations }}
        - key: {{ tpl $v.key  $ }}
          {{- if $v.operator }}
          operator: "{{ $v.operator }}"
          {{- end }}
          {{- if $v.effect }}
          effect: "{{ $v.effect }}"
          {{- end }}
      {{- end }} 
      nodeSelector:
        node.kubernetes.io/instance-type: {{ .Values.resources.node_type }}
      containers:
        - name: {{ .Values.server.name }}
          env:
            {{- range $env := .Values.server.env }}
            - name: {{ $env.name }}
              value: "{{ tpl $env.value $ }}"
            {{- end }}
          command: 
            - /etc/config/launcher.sh
          image: "{{ .Values.image.name }}"
          imagePullPolicy: {{ .Values.image.pull_policy }}
          ports:
          {{- range $port := .Values.server.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.value }}
          {{- end }}
          livenessProbe:
            initialDelaySeconds: 15
            failureThreshold: {{ .Values.server.liveness_probe.failure_threshold }}
            periodSeconds: {{ .Values.server.liveness_probe.period_secs }}
            {{- if .Values.server.liveness_probe.exec }}
            exec:
              command: {{ toYaml .Values.server.liveness_probe.exec.command | nindent 14 }}
            {{- else if .Values.server.liveness_probe.path }}
            httpGet:
              path: {{ .Values.server.liveness_probe.path }}
              port: {{ .Values.server.liveness_probe.port }}
            {{- end }}
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: {{ .Values.server.readiness_probe.period_secs }}
            failureThreshold: {{ .Values.server.readiness_probe.failure_threshold }}
            {{- if .Values.server.readiness_probe.exec }}
            exec:
              command: {{ toYaml .Values.server.readiness_probe.exec.command | nindent 14 }}
            {{- else if .Values.server.readiness_probe.path }}
            httpGet:
              path: {{ .Values.server.readiness_probe.path }}
              port: {{ .Values.server.readiness_probe.port }}
            {{- end }}
          startupProbe:
            initialDelaySeconds: 120
            periodSeconds: {{ .Values.server.startup_probe.period_secs }}
            failureThreshold: {{ .Values.server.startup_probe.failure_threshold }}
            {{- if .Values.server.startup_probe.exec }}
            exec:
              command: {{ toYaml .Values.server.startup_probe.exec.command | nindent 14 }}
            {{- else if .Values.server.startup_probe.path }}
            httpGet:
              path: {{ .Values.server.startup_probe.path }}
              port: {{ .Values.server.startup_probe.port }}
            {{- end }}
          volumeMounts:
            - mountPath: /etc/config
              name: config
            - mountPath: /dev/shm
              name: shm
            {{- $pv_index := 1 }}
            {{- range $pv := .Values.pvc }}
            - mountPath: {{ $pv.mount_path }}
              name: pv-{{ $pv_index }}
            {{- $pv_index = add $pv_index 1 }}
            {{- end }}
            {{- if .Values.ebs }}
            - name: ebs
              mountPath: {{ .Values.ebs.mount_path | default "/tmp" }}
            {{- end }}
          resources:
            requests:
            {{- range $k, $v := .Values.resources.requests }}
              {{ $k }}: {{ $v }}
            {{- end }}
            limits:
            {{- range $k, $v := .Values.resources.limits }}
              {{ $k }}: {{ $v }}
            {{- end }}
---
{{- if gt .Values.server.autoscaling.maxReplicas .Values.server.autoscaling.minReplicas }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}
  annotations:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}
  minReplicas: {{ .Values.server.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.server.autoscaling.maxReplicas }} 
  metrics: {{ toYaml .Values.server.autoscaling.metrics | nindent 2}}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
  annotations:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  ports:
  {{- range $port := .Values.server.ports }}
    - protocol: TCP
      name: {{ $port.name }}
      port: {{ $port.value }}
      targetPort:  {{ $port.value }}
  {{- end }}
  selector:
    app: {{ .Release.Name }}
  type: ClusterIP