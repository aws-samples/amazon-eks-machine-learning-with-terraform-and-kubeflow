{{- if .Values.ebs  }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-{{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc-wait
  resources:
    requests:
      storage: {{ .Values.ebs.storage | default "400Gi" }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hf-snapshot-{{ .Release.Name }}
data:
  hf-snapshot.sh: |
    #!/bin/bash

    pip3 install --upgrade pip
    pip3 install huggingface-hub==0.22.2
    mkdir -p $LOG_ROOT
    OUTPUT_LOG=$LOG_ROOT/hfsnapshot.log

    cat > /tmp/hf_snapshot.py <<EOF
    from huggingface_hub import snapshot_download
    from tempfile import TemporaryDirectory
    from pathlib import Path
    import shutil
    import os

    hf_model_id = os.environ.get("HF_MODEL_ID", None)
    assert hf_model_id is not None, "HF_MODEL_ID must be set"
    print(f"HF_MODEL_ID: {hf_model_id}", flush=True)

    hf_tensors = os.environ.get("HF_TENSORS", "true").lower() in ("true", "1")
    print(f"Download Hugging Face Snapshot Tensors: {hf_tensors}", flush=True)

    hf_token = os.environ.get("HF_TOKEN", None)

    with TemporaryDirectory(suffix="model", prefix="hf", dir="/tmp") as cache_dir:
        ignore_patterns = ["*.msgpack", "*.h5"] if hf_tensors else ["*.msgpack", "*.h5", "*.bin", "*.safetensors"]
        print(f"Downloading HuggingFace snapshot: {hf_model_id} to local dir: {cache_dir}")
        snapshot_download(repo_id=hf_model_id, 
            cache_dir=cache_dir,
            ignore_patterns=ignore_patterns,
            token=hf_token)
        print(f"Completed downloading HuggingFace snapshot: {hf_model_id} to local dir: {cache_dir}", flush=True)

        cache_path = Path(cache_dir)
        local_snapshot_path = str(list(cache_path.glob(f"**/snapshots/*"))[0])
        print(f"Local snapshot path: {local_snapshot_path}", flush=True)

        snapshot_path = os.path.join(os.environ["SNAPSHOT_ROOT"], os.environ["HF_MODEL_ID"])
        os.makedirs(snapshot_path, exist_ok=True)

        print(f"Copying snapshot to {snapshot_path}", flush=True)
        for root, dirs, files in os.walk(local_snapshot_path):
            for file in files:
                full_path = os.path.join(root, file)
                
                # Calculate the relative path from the source root
                rel_path = os.path.relpath(full_path, local_snapshot_path)
                
                # Create the destination path preserving folder structure
                dest_path = os.path.join(snapshot_path, rel_path)
                
                # Create destination directory if it doesn't exist
                dest_dir = os.path.dirname(dest_path)
                os.makedirs(dest_dir, exist_ok=True)
                
                print(f"Copying {full_path} to {dest_path}", flush=True)
                shutil.copy2(full_path, dest_path)

        print(f"Completed copying snapshot to {snapshot_path}", flush=True)

    EOF

    python /tmp/hf_snapshot.py 2>&1 | tee $OUTPUT_LOG
    chown -R {{ .Values.snapshot.user | default "root" }}:{{ .Values.snapshot.group | default "root" }} $SNAPSHOT_ROOT
---
apiVersion: v1
kind: Pod
metadata:
  name: hf-snapshot-{{ .Release.Name }}
  annotations:
    karpenter.sh/do-not-disrupt: "true"
    sidecar.istio.io/inject: 'false'
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  restartPolicy: Never
  volumes:
  {{- $pv_index := 1 }}
  {{- range $pv := .Values.pvc }}
  - name: pv-{{ $pv_index }}
    persistentVolumeClaim:
      claimName: {{ $pv.name }}
  {{- $pv_index = add $pv_index 1 }}
  {{- end }}
  {{- if .Values.ebs }}
  - name: ebs
    persistentVolumeClaim:
      claimName: ebs-{{ .Release.Name }}
  {{- end }}
  - name: config
    configMap:
      defaultMode: 420
      items:
      - key: hf-snapshot.sh
        mode: 365
        path: hf-snapshot.sh
      name: hf-snapshot-{{ .Release.Name }}
  containers:
  - name: hf-snapshot
    env:
    - name: XDG_CACHE_HOME
      value: /tmp/.cache
    - name: LOG_ROOT
      value: /efs/home/{{ .Release.Name }}/logs
    - name: SNAPSHOT_ROOT
      value: {{ .Values.snapshot.dir | default "/fsx/pretrained-models" }}
    {{- range $v := .Values.env }}
    - name: {{ $v.name }}
      value: "{{ tpl $v.value $ }}"
    {{- end }}
    command:
    -  sh 
    - /etc/config/hf-snapshot.sh
    image: public.ecr.aws/docker/library/python:slim-bullseye
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - mountPath: /etc/config
      name: config
    {{- $pv_index := 1 }}
    {{- range $pv := .Values.pvc }}
    - mountPath: {{ $pv.mount_path }}
      name: pv-{{ $pv_index }}
    {{- $pv_index = add $pv_index 1 }}
    {{- end }}
    {{- if .Values.ebs }}
    - name: ebs
      mountPath: {{ .Values.ebs.mount_path | default "/tmp" }}
    {{- end }}
    resources:
      requests:
      {{- range $k, $v := .Values.resources.requests }}
        {{ $k }}: {{ $v }}
      {{- end }}
      limits:
      {{- range $k, $v := .Values.resources.limits }}
        {{ $k }}: {{ $v }}
      {{- end }}
